{"version":3,"sources":["Calculator/Calculator.js","Calculator/Screen/LogScreen.js","Calculator/Keys/KeyRow.js","Components/Button.js","Components/LargeButton.js","Calculator/Keys/Keypad.js","Calculator/Screen/Result.js","Calculator/Screen/Calculations.js","Calculator/Screen/Screen.js","logo.svg","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","equation","result","calculatorLog","websocket","WebSocket","onButtonPress","event","pressedButton","target","innerHTML","clear","indexOf","evalResult","eval","Number","isInteger","toFixed","setState","send","error","alert","trim","substr","length","this","onopen","console","log","onclose","onmessage","evt","data","prevLog","slice","concat","className","React","Component","i","calculatorLogScreen","props","map","key","keypadRow","children","button","classes","type","push","join","onClick","largeButton","Button","keypad","LargeButton","resultScreen","computationScreen","screen","Result","module","exports","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0f6a4ab9.chunk.js","sourcesContent":["import React from 'react';\r\nimport Screen from './Screen/Screen';\r\nimport CalculatorLogScreen from './Screen/LogScreen';\r\nimport Keypad from './Keys/Keypad';\r\n\r\nclass Calculator extends React.Component {\r\n\r\n    state = {\r\n        equation: '',\r\n        result: 0,\r\n        calculatorLog: []\r\n    }\r\n  websocket = new WebSocket('wss://sezzle-calculator-app-be.herokuapp.com//')\r\n\r\n   componentDidMount() {\r\n     this.websocket.onopen = () => {\r\n       console.log('connected')\r\n     }\r\n\r\n     this.websocket.onclose = () => {\r\n       console.log('disconnected')\r\n     }\r\n   }\r\n\r\n    onButtonPress = event => {\r\n        let equation = this.state.equation;\r\n        const pressedButton = event.target.innerHTML;\r\n\r\n        if (pressedButton === 'C') return this.clear();\r\n        else if ((pressedButton >= '0' && pressedButton <= '9') || pressedButton === '.') equation += pressedButton;\r\n        else if (['+', '-', '*', '/', '%'].indexOf(pressedButton) !== -1) equation += ' ' + pressedButton + ' ';\r\n        else if (pressedButton === '=') {\r\n            try {\r\n                const evalResult = eval(equation);\r\n                const result = Number.isInteger(evalResult)? evalResult : evalResult.toFixed(2);\r\n                this.setState({result});\r\n                this.websocket.send(equation + ' = ' + result);\r\n            } catch (error) {\r\n                alert('ERROR!');\r\n            }\r\n        }\r\n        else {\r\n            equation = equation.trim();\r\n            equation = equation.substr(0, equation.length - 1);\r\n        }\r\n\r\n        this.setState({equation: equation});\r\n    }\r\n\r\n    clear() {\r\n        this.setState({equation: '', result: 0});\r\n    }\r\n\r\n    render() {\r\n      this.websocket.onmessage = evt => {\r\n\r\n        console.log(evt.data)\r\n        if (this.state.calculatorLog.length == 10)\r\n            var prevLog = this.state.calculatorLog.slice(0,9);\r\n        else\r\n            prevLog = this.state.calculatorLog;\r\n\r\n\r\n        this.setState({calculatorLog: [evt.data].concat(prevLog)})\r\n\r\n      }\r\n        return (\r\n            <main className=\"calculator\">\r\n                <h1 className=\"head\"><b>CALCULATOR</b></h1>\r\n                <Screen result={this.state.result} equation={this.state.equation} />\r\n                <Keypad onButtonPress={this.onButtonPress} />\r\n                <CalculatorLogScreen calculatorLog={this.state.calculatorLog} />\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\nvar i = 0\r\nconst calculatorLogScreen = (props) => (\r\n\r\n  <div className='calculator-log-screen'>\r\n    {props.calculatorLog.map(log => (\r\n      <div className=\"calculator-log\" key={i++}>{log}</div>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default calculatorLogScreen;","import React from 'react';\r\n\r\nconst keypadRow = (props) => (\r\n    <div className=\"keypad__row\">\r\n        {props.children}\r\n    </div>\r\n);\r\nexport default keypadRow;","import React from 'react';\r\nconst button = (props) => {\r\n    const classes =['btn'];\r\n    if(typeof props !== 'undefined' && typeof props.type !=='undefined')\r\n        classes.push('btn--' +props.type);\r\n    return(\r\n        <button className={classes.join(' ')} onClick={props.onButtonPress}>\r\n            {props.children}\r\n        </button>\r\n    );\r\n};\r\nexport default button;","import React from 'react';\r\nimport Button from './Button';\r\nconst largeButton= (props) => <Button type='large' {...props}/>;\r\nexport default largeButton;\r\n","import React from 'react';\r\n\r\nimport KeypadRow from './KeyRow';\r\nimport Button from '../../Components/Button';\r\nimport LargeButton from '../../Components/LargeButton';\r\n\r\nconst keypad = props => (\r\n    <section className=\"keypad\">\r\n        {/* row #1 */}\r\n        <KeypadRow>\r\n            <Button type=\"primary\" onButtonPress={props.onButtonPress}>C</Button>\r\n            <Button type=\"primary\" onButtonPress={props.onButtonPress}>DEL</Button>\r\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>.</Button>\r\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>/</Button>\r\n        </KeypadRow>\r\n\r\n        {/* row #2 */}\r\n        <KeypadRow>\r\n            <Button onButtonPress={props.onButtonPress}>7</Button>\r\n            <Button onButtonPress={props.onButtonPress}>8</Button>\r\n            <Button onButtonPress={props.onButtonPress}>9</Button>\r\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>*</Button>\r\n        </KeypadRow>\r\n\r\n        {/* row #3 */}\r\n        <KeypadRow>\r\n            <Button onButtonPress={props.onButtonPress}>4</Button>\r\n            <Button onButtonPress={props.onButtonPress}>5</Button>\r\n            <Button onButtonPress={props.onButtonPress}>6</Button>\r\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>-</Button>\r\n        </KeypadRow>\r\n\r\n        {/* row #4 */}\r\n        <KeypadRow>\r\n            <Button onButtonPress={props.onButtonPress}>1</Button>\r\n            <Button onButtonPress={props.onButtonPress}>2</Button>\r\n            <Button onButtonPress={props.onButtonPress}>3</Button>\r\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>+</Button>\r\n        </KeypadRow>\r\n\r\n        {/* row #5 */}\r\n        <KeypadRow>\r\n            <Button onButtonPress={props.onButtonPress}>0</Button>\r\n            <LargeButton onButtonPress={props.onButtonPress}>=</LargeButton>\r\n        </KeypadRow>\r\n    </section>\r\n);\r\n\r\nexport default keypad;","import React from 'react';\r\n\r\nconst resultScreen = (props) => (\r\n    <div className=\"result-screen\">\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\nexport default resultScreen;","import React from 'react';\r\n\r\nconst computationScreen = (props) => (\r\n    <div className=\"computation-screen\">\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\nexport default computationScreen;","import React from 'react';\r\n\r\nimport ResultScreen from './Result';\r\nimport ComputationScreen from './Calculations';\r\n\r\nconst screen = (props) => (\r\n    <section className=\"screen\">\r\n        <ResultScreen>{props.result}</ResultScreen>\r\n        <ComputationScreen>{props.equation}</ComputationScreen>\r\n        \r\n    </section>\r\n);\r\n\r\nexport default screen;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './styles/styles.css';\nimport Calculator from './Calculator/Calculator';\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}